//
// Entry Point

Template = __ el:Root __ {
    return el;
}

//
// Productions

Root
    = SimpleElement
    / Element

SimpleElement
    = el:ElementType _ str:StringLike TERM {
        return {
            type: "element",
            el: el,
            body: [str]
        };
    }
    / el:ElementType TERM {
        return {
            type: "element",
            el: el,
            body: []
        };
    }

Element
    = el:ElementType _ body:Block {
        return {
            type: "element",
            el: el,
            body: body
        };
    }

ElementType
    = sel:SimpleSelector attrs:AttributeList? {
        sel.attributes = attrs || [];
        return sel;
    }

SimpleSelector
    = name:NodeName id:NodeId? classes:ClassList? {
        return {
            type: "selector",
            name: name,
            id: id,
            classes: classes || []
        };
    }
    / id:NodeId classes:ClassList? {
        return {
            type: "selector",
            name: "div",
            id: id,
            classes: classes || []
        };
    }
    / classes:ClassList {
        return {
            type: "selector",
            name: "div",
            id: null,
            classes: classes
        };   
    }

NodeName
    = symbol

NodeId
    = '#' sym:symbol {
        return sym;
    }

ClassList
    = ClassItem+

ClassItem
    = '.' name:symbol predicate:(':' Variable)? {
        if (predicate) {
            return {
                type: "class-toggle",
                name: name,
                predicate: predicate[1]
            };
        } else {
            return {
                type: "class-static",
                name: name.name,
                predicate: name.name
            };
        }
    }
    / '.' variable:Variable predicate:'?'? {
        if (predicate) {
            return {
                type: "class-toggle",
                name: variable.name,
                predicate: variable
            }
        }
    }
    / '.' exp:Interpolation {
        return {
            type: "class-dynamic",
            expression: exp
        }
    }

AttributeList
    = '(' _ attrs:Attributes ')' {
        return attrs;
    }

Attributes
    = head:Attribute tail:(',' _ Attribute)* {
        var out = [head];
        tail.forEach(function(t) {
            out.push(t[2]);
        });
        return out;
    }

Attribute
    = key:Key _ '=' _ exp:Expression {
        return {
            type: "attribute-value",
            key: key,
            exp: exp
        };
    }
    / key:Key del:Delegate? _ '->' _ evt:EventName {
        return {
            type: "attribute-event",
            key: key,
            delegate: del,
            event: evt
        };
    }

Key
    = $( [a-z_]i [a-z0-9_-]i* )

Delegate
    = '(' selector:$( [^)]+ ) ')' {
        return selector.trim();
    }

Expression
    = x:Symbol _ { return x; }
    / x:String _ { return x; }
    / x:Variable _ { return x; }

EventName
    = $( [a-z_]i [a-z0-9_:-]i* _ )

Block
    = '{' __ exps:BlockInner* '}' __ {
        return exps;
    }

BlockInner
    = IfStatement
    / SimpleElement
    / str:StringLike __ { return str; }
    / BoundCollection
    / Element

IfStatement
    = If _ exp:Expression cons:Block alt:(Else _ Block)? {
        return {
            type: "if",
            exp: exp,
            consequent: cons,
            alternate: alt ? alt[2] : null
        };
    }

BoundCollection
    = '@' name:VariableName _ alt:(Else _ Block)? __ {
        return {
            type: "bound-collection",
            name: name,
            alternate: alt ? alt[2] : null
        };
    }

StringLike
    = String
    / Variable

String
    = '"' str:DoubleQuotedStringItem* '"' _ {
        if (str.length === 1 && typeof str[0] === 'string') {
            return {
                type: "string",
                value: str[0]
            };
        } else {
            return {
                "type": "interpolated-string",
                "chunks": str
            }
        }
    }
    / "'" str:SingleQuotedStringItem* "'" _ {
        if (str.length === 1 && typeof str[0] === 'string') {
            return {
                type: "string",
                value: str[0]
            };
        } else {
            return {
                "type": "interpolated-string",
                "chunks": str
            }
        }
    }

DoubleQuotedStringItem
    = $( DoubleQuotedStringChar+ )
    / Interpolation

DoubleQuotedStringChar
    = '\\n'     { return "\n"; }
    / '\\t'     { return "\t"; }
    / '\\"'     { return '"'; }
    / '\\\\'    { return "\\"; }
    / '#' !'{'  { return '#'; }
    / [^\"#]

SingleQuotedStringItem
    = $( SingleQuotedStringChar+ )
    / Interpolation

SingleQuotedStringChar
    = '\\n'     { return "\n"; }
    / '\\t'     { return "\t"; }
    / "\\'"     { return "'"; }
    / '\\\\'    { return "\\"; }
    / '#' !'{'  { return '#'; }
    / [^\'#]

Interpolation
    = '#{' exp:Expression '}' {
        return {
            type: 'interpolation',
            exp: exp
        };
    }

Variable
    = UnboundVariable
    / BoundVariable

UnboundVariable
    = '$' name:VariableName {
        return {
            type: "variable",
            name: name    
        }
    };

BoundVariable
    = '$$' name:VariableName {
        return {
            type: "bound-variable",
            name: name    
        }
    }

VariableName
    = $( [a-z_]i [a-z0-9_-]i* )

Symbol
    = sym:$( symbol ) {
        return {
            type: "symbol",
            name: sym
        };
    }

SymbolHead
    = [a-z_]i

SymbolRest
    = [a-z0-9_-]i

//
// Tokens

If      = 'if'      !SymbolRest
Else    = 'else'    !SymbolRest

//
// Helpers

_
    = [ \t]*

__
    = IGNORE*

NL
    = '\n'
    / '\r' '\n'?

COMMENT
    = '//' [^\r\n]*

IGNORE
    = [ \t\r\n]
    / COMMENT

TERM
    = _ &'}'
    / _ COMMENT? NL __
    / _ COMMENT? !.

symbol
    = sym:$( symbol_head symbol_rest* ) {
        return sym;
    }

symbol_head
    = [a-z_]i

symbol_rest
    = [a-z0-9_-]i